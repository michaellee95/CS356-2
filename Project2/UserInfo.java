/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Michael
 */
public class UserInfo extends javax.swing.JFrame {
    
    private User user;
    private String userName;
    private List<UserComponent> userFollower = new ArrayList<UserComponent>();
    private List<UserComponent> userFollowed = new ArrayList<UserComponent>();
    private UserController userController;
    private Updator updator;
    private MessageCounter messageCounter = new MessageCounter();
    private PositiveCounter positiveCounter = new PositiveCounter();
    private int currentNewsFeedCounter;
    private String dateString;
    private String lastUpdateTimeString;
    private long timeStamp;
    private Date date;
    private SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy HH:mm:ss");

    /**
     * Creates new form UserInfo
     */
    public UserInfo(User user, UserController userController, Updator updator, MessageCounter messageCounter, PositiveCounter positiveCounter) {
        //Set look and feel
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }   
        //Update components based on what user has been selected
        initComponents();
        this.user = user;
        this.userName = user.getName();
        this.timeStamp = user.getTimeStamp();        
        this.date = new Date(timeStamp);
        this.dateString = sdf.format(date);
        this.setTitle(userName + "'s Data. User Since: " + dateString);
        this.setLocationRelativeTo(null);
        this.userController = userController;
        this.updator = updator;
        this.messageCounter = messageCounter;
        this.positiveCounter = positiveCounter;
        this.currentNewsFeedCounter = this.user.getNewsFeed().size();
        followedListArea.setText(getFollowedAsList());
        newsFeedArea.setText(getNewsFeedAsList());
        setLastUpdateTime(timeStamp);
        checkForChange();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        followerNameField = new javax.swing.JTextField();
        addUserButton = new javax.swing.JButton();
        newsFeedPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        newsFeedArea = new javax.swing.JTextArea();
        newsFeedLabel = new javax.swing.JLabel();
        lastUpdateTimeLabel = new javax.swing.JLabel();
        tweetMessageField = new javax.swing.JTextField();
        postTweetButton = new javax.swing.JButton();
        FollowedListPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        followedListArea = new javax.swing.JTextArea();
        currentFollowingLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(450, 450));
        setMinimumSize(new java.awt.Dimension(450, 450));
        setPreferredSize(new java.awt.Dimension(450, 450));
        setResizable(false);

        followerNameField.setText("User ID");
        followerNameField.addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent e){
                followerNameField.setText("");
            }
        });

        addUserButton.setText("Follow User");
        addUserButton.setPreferredSize(new java.awt.Dimension(200, 50));
        addUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserButtonActionPerformed(evt);
            }
        });

        newsFeedPanel.setBackground(new java.awt.Color(255, 255, 255));

        newsFeedArea.setColumns(20);
        newsFeedArea.setRows(5);
        jScrollPane1.setViewportView(newsFeedArea);

        newsFeedLabel.setBackground(new java.awt.Color(255, 255, 255));
        newsFeedLabel.setText("News Feed");
        newsFeedLabel.setText("<html><u>News Feed</u></html>");

        lastUpdateTimeLabel.setText("lastUpdateTime");

        javax.swing.GroupLayout newsFeedPanelLayout = new javax.swing.GroupLayout(newsFeedPanel);
        newsFeedPanel.setLayout(newsFeedPanelLayout);
        newsFeedPanelLayout.setHorizontalGroup(
            newsFeedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
            .addGroup(newsFeedPanelLayout.createSequentialGroup()
                .addComponent(newsFeedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lastUpdateTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        newsFeedPanelLayout.setVerticalGroup(
            newsFeedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, newsFeedPanelLayout.createSequentialGroup()
                .addGroup(newsFeedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lastUpdateTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                    .addComponent(newsFeedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tweetMessageField.setText("Tweet Message");
        tweetMessageField.addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent e){
                tweetMessageField.setText("");
            }
        });

        postTweetButton.setText("Post Tweet");
        postTweetButton.setPreferredSize(new java.awt.Dimension(200, 50));
        postTweetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postTweetButtonActionPerformed(evt);
            }
        });

        FollowedListPanel.setBackground(new java.awt.Color(255, 255, 255));

        followedListArea.setColumns(20);
        followedListArea.setRows(5);
        jScrollPane2.setViewportView(followedListArea);

        currentFollowingLabel.setBackground(new java.awt.Color(255, 255, 255));
        currentFollowingLabel.setText("Currently Following");
        currentFollowingLabel.setText("<html><u>Currently Following</u></html>");

        javax.swing.GroupLayout FollowedListPanelLayout = new javax.swing.GroupLayout(FollowedListPanel);
        FollowedListPanel.setLayout(FollowedListPanelLayout);
        FollowedListPanelLayout.setHorizontalGroup(
            FollowedListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
            .addGroup(FollowedListPanelLayout.createSequentialGroup()
                .addComponent(currentFollowingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        FollowedListPanelLayout.setVerticalGroup(
            FollowedListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FollowedListPanelLayout.createSequentialGroup()
                .addComponent(currentFollowingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newsFeedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(followerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(addUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tweetMessageField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(postTweetButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(FollowedListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(followerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FollowedListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tweetMessageField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(postTweetButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(newsFeedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Code for what happens when add user button is pressed
    private void addUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserButtonActionPerformed
        //Find user based on user input
        String userName = followerNameField.getText();
        UserComponent selectedUser = userController.getUser(userName); 
        
        //Check if this user can follow input user
        if(canAdd(userName, selectedUser)){
            this.user.addFollowed(selectedUser);   
            followedListArea.setText(getFollowedAsList());
        }
    }//GEN-LAST:event_addUserButtonActionPerformed

    //Code for what happens when post tweet button is pressed
    private void postTweetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postTweetButtonActionPerformed
        /*Get what user typed and update its newsFeed
        Update newsFeedPanel to show the new message
        Also call updator to update number of messages
        */
        String tweet = tweetMessageField.getText();
        this.user.addNewsFeed(tweet);
        newsFeedArea.setText(getNewsFeedAsList());
        updator.visit(messageCounter);
        //Check if message is positive, if so update number of positive messages
        if (isPositive(tweet))
            updator.visit(positiveCounter);
    }//GEN-LAST:event_postTweetButtonActionPerformed

    //Convert list of users this user follows as a string list
    private String getFollowedAsList(){
        StringBuilder followedList = new StringBuilder();
        List<UserComponent> followed = this.user.getFollowed();
        for(UserComponent followedUser: followed){
            followedList.append("- " + followedUser.getName() + "\n");
        }
        
        return followedList.toString();
    }
    
    //Convert this user' list of tweets as a string list
    private String getNewsFeedAsList(){
        StringBuilder newsFeedList = new StringBuilder();
        List<String> newsFeed = this.user.getNewsFeed();
        for(String aTweet: newsFeed){
            newsFeedList.append(aTweet + "\n");
        }
        
        return newsFeedList.toString();    
    }
    
    //Method that check if user can be added as a followed
    private boolean canAdd(String userName, UserComponent selectedUser){
        
        //Check if user is trying to follow self, if so show error message
        if (userName.equalsIgnoreCase(user.getName())){
            JOptionPane.showMessageDialog(this, "Cannot add self ", "Error adding user.", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        else{          
            //If user does not exist/cannot be found, show error message
            if (selectedUser == null){
                JOptionPane.showMessageDialog(this, "User does not exist ", "Error searching user.", JOptionPane.WARNING_MESSAGE);     
                return false;
            }
            //Check if user is already being followed, if so show error message
            else{
                for (UserComponent aUser: user.getFollowed()){
                    if(aUser.getName().equalsIgnoreCase(userName)){
                        JOptionPane.showMessageDialog(this, "User is already being followed ", "Error adding user.", JOptionPane.WARNING_MESSAGE); 
                        return false;
                    }
                }
            }            
        }
        
        return true;
    }
    
    //Method for checking if tweet is positive
    private boolean isPositive(String message){
        //Split sentence into words
        String[] split = message.split("\\s+");
        //For each word check if it is positive
        for (String word: split){
            if (word.equalsIgnoreCase("good") || word.equalsIgnoreCase("great") || word.equalsIgnoreCase("excellent"))
                return true;
        }
        
        return false;
    }
    
    /*Method for checking if user's newsfeed changed (subject added tweet)
    If so newsFeedPanel should be updated and so should last update time
    Method is set as thread to continuously check for change
    */
    private void checkForChange(){
        Runnable checkChange = () -> {
            while(true){
                int newLength = this.user.getNewsFeed().size();
                if (newLength != currentNewsFeedCounter){
                    currentNewsFeedCounter = newLength;
                    newsFeedArea.setText(getNewsFeedAsList());
                    setLastUpdateTime(user.getLastUpdateTime());
                }      
                try{
                    Thread.sleep(100);
                }catch(Exception e){
                    e.printStackTrace();
                    continue;
                }                
            }
        };
        
        new Thread (checkChange).start();        
    }
    
    //Method for setting last update time
    private void setLastUpdateTime(long lastUpdateTime){
        lastUpdateTimeString = sdf.format(lastUpdateTime);
        this.lastUpdateTimeLabel.setText("Last Update Time: " + lastUpdateTimeString);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel FollowedListPanel;
    private javax.swing.JButton addUserButton;
    private javax.swing.JLabel currentFollowingLabel;
    private javax.swing.JTextArea followedListArea;
    private javax.swing.JTextField followerNameField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lastUpdateTimeLabel;
    private javax.swing.JTextArea newsFeedArea;
    private javax.swing.JLabel newsFeedLabel;
    private javax.swing.JPanel newsFeedPanel;
    private javax.swing.JButton postTweetButton;
    private javax.swing.JTextField tweetMessageField;
    // End of variables declaration//GEN-END:variables
}
